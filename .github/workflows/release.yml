name: Release

on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: Release Version
        required: true
        default: 6.0.0
      snapshotVersion:
        description: Snapshot Version
        required: true
        default: 7.0.0-SNAPSHOT

run-name: 'version set to ${{ github.event.inputs.releaseVersion }} for release'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Cache local Maven repository
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-

    - name: Set up JDK 13
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '13'
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
        gpg-passphrase: GPG_PASSPHRASE
        architecture: x64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        install: true

    - name: Set Multi-Builder Docker Buildx
      run: docker buildx create --use --name multi-builder --platform linux/arm64,linux/amd64,linux/arm64/v8

    - name: "Configure Git"
      run: |
        git fetch
        git checkout ${{ github.event.inputs.branch }}
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

    - name: "Maven: Set Release Version"
      run: mvn versions:set -DnewVersion=${{ github.event.inputs.releaseVersion }}

    - name: Build Dirigible
      run: mvn clean install -Dmaven.javadoc.skip=false

#-----------------Publish to DockerHub-------------------#

    - name: Docker Login
      run: docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_PASSWORD}}

    - name: Push SAP Cloud Foundry
      run: |
        cd releng/sap-cf-all
        docker build --load --build-arg DIRIGIBLE_VERSION=${{ github.event.inputs.releaseVersion }} -t dirigible-base-platform-sap-cf -f Dockerfile-base .
        docker tag dirigible-base-platform-sap-cf dirigiblelabs/dirigible-base-platform-sap-cf:${{ github.event.inputs.releaseVersion }}
        docker push dirigiblelabs/dirigible-base-platform-sap-cf:${{ github.event.inputs.releaseVersion }}
        docker build --load --build-arg DIRIGIBLE_VERSION=${{ github.event.inputs.releaseVersion }} -t dirigible-sap-cf .
        docker tag dirigible-sap-cf dirigiblelabs/dirigible-sap-cf:${{ github.event.inputs.releaseVersion }}
        docker push dirigiblelabs/dirigible-sap-cf:${{ github.event.inputs.releaseVersion }}
        cd ../../
    - name: Push SAP Cloud Foundry - Runtime
      run: |
        cd releng/sap-cf-runtime
        docker build --load --build-arg DIRIGIBLE_VERSION=${{ github.event.inputs.releaseVersion }} -t dirigible-base-platform-sap-cf-runtime -f Dockerfile-base .
        docker tag dirigible-base-platform-sap-cf-runtime dirigiblelabs/dirigible-base-platform-sap-cf-runtime:${{ github.event.inputs.releaseVersion }}
        docker push dirigiblelabs/dirigible-base-platform-sap-cf-runtime:${{ github.event.inputs.releaseVersion }}
        docker build --load --build-arg DIRIGIBLE_VERSION=${{ github.event.inputs.releaseVersion }} -t dirigible-sap-cf-runtime .
        docker tag dirigible-sap-cf-runtime dirigiblelabs/dirigible-sap-cf-runtime:${{ github.event.inputs.releaseVersion }}
        docker push dirigiblelabs/dirigible-sap-cf-runtime:${{ github.event.inputs.releaseVersion }}
        docker image prune -a -f
        cd ../../
    - name: Push SAP Kyma
      run: |
        cd releng/sap-kyma-all
        docker build --load --build-arg DIRIGIBLE_VERSION=${{ github.event.inputs.releaseVersion }} -t dirigible-base-platform-sap-kyma -f Dockerfile-base .
        docker tag dirigible-base-platform-sap-kyma dirigiblelabs/dirigible-base-platform-sap-kyma:${{ github.event.inputs.releaseVersion }}
        docker push dirigiblelabs/dirigible-base-platform-sap-kyma:${{ github.event.inputs.releaseVersion }}
        docker build --load --build-arg DIRIGIBLE_VERSION=${{ github.event.inputs.releaseVersion }} -t dirigible-sap-kyma .
        docker tag dirigible-sap-kyma dirigiblelabs/dirigible-sap-kyma:${{ github.event.inputs.releaseVersion }}
        docker push dirigiblelabs/dirigible-sap-kyma:${{ github.event.inputs.releaseVersion }}
        cd ../../
    - name: Push SAP Kyma - Runtime
      run: |
        cd releng/sap-kyma-runtime
        docker build --load --build-arg DIRIGIBLE_VERSION=${{ github.event.inputs.releaseVersion }} -t dirigible-base-platform-sap-kyma-runtime -f Dockerfile-base .
        docker tag dirigible-base-platform-sap-kyma-runtime dirigiblelabs/dirigible-base-platform-sap-kyma-runtime:${{ github.event.inputs.releaseVersion }}
        docker push dirigiblelabs/dirigible-base-platform-sap-kyma-runtime:${{ github.event.inputs.releaseVersion }}
        docker build --load --build-arg DIRIGIBLE_VERSION=${{ github.event.inputs.releaseVersion }} -t dirigible-sap-kyma-runtime .
        docker tag dirigible-sap-kyma-runtime dirigiblelabs/dirigible-sap-kyma-runtime:${{ github.event.inputs.releaseVersion }}
        docker push dirigiblelabs/dirigible-sap-kyma-runtime:${{ github.event.inputs.releaseVersion }}
        docker image prune -a -f
        cd ../../
    - name: Push Dirigible
      run: |
        cd releng/server-all
        docker build --load --build-arg DIRIGIBLE_VERSION=${{ github.event.inputs.releaseVersion }} -t dirigible-base-platform -f Dockerfile-base .
        docker tag dirigible-base-platform dirigiblelabs/dirigible-base-platform:${{ github.event.inputs.releaseVersion }}
        docker push dirigiblelabs/dirigible-base-platform:${{ github.event.inputs.releaseVersion }}
        docker build --load --build-arg DIRIGIBLE_VERSION=${{ github.event.inputs.releaseVersion }} -t dirigible-all .
        docker tag dirigible-all dirigiblelabs/dirigible-all:${{ github.event.inputs.releaseVersion }}
        docker push dirigiblelabs/dirigible-all:${{ github.event.inputs.releaseVersion }}
        docker image prune -a -f
        cd ../../

#-----------------Publish to DockerHub-------------------#

#---------------Publish to Maven Central-----------------#

    - name: Publish packages to Maven Central
      run: |
        mvn javadoc:jar
        mvn deploy -P release -DskipTests -Dmaven.test.skip=true
      env:
        MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
        GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASS_PHRASE }}

    - name: "Git: Commit Release Version"
      run: |
        git add **/pom.xml
        git commit -m "version set to ${{ github.event.inputs.releaseVersion }} for release"
        git checkout -b ${{ github.event.inputs.releaseVersion }}
        git checkout ${{ github.event.inputs.branch }}

    - name: "Maven: Set Snapshot Version"
      run: mvn versions:set -DnewVersion=${{ github.event.inputs.snapshotVersion }}

    - name: "Git: Commit Snapshot Version"
      run: |
        git add **/pom.xml
        git commit -m "version set to ${{ github.event.inputs.snapshotVersion }} for development"

#---------------Publish to Maven Central-----------------#

#----------------Publish GitHub Release------------------#

    - name: Package WAR files
      run: |
        zip --junk-paths server-all releng/server-all/target/ROOT.war

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.releaseVersion }}
        release_name: ${{ github.event.inputs.releaseVersion }}
        draft: false
        prerelease: false
        body: |
          ## Eclipse Dirigible - ${{ github.event.inputs.releaseVersion }}

          #### Release:

          The lates release notes are available [here](https://www.dirigible.io/releases.html).

          > _**Note:** All released versions can be found [here](https://github.com/eclipse/dirigible/releases/)._
          
          #### Maven:

          250+ Maven dependencies can be found [here]( https://search.maven.org/#search%7Cga%7C1%7Corg.eclipse.dirigible).
          ```xml
          <dependency>
              <groupId>org.eclipse.dirigible</groupId>
              <artifactId>dirigible-server-all</artifactId>
              <version>${{ github.event.inputs.releaseVersion }}</version>
          </dependency>
          ```

          #### Docker images:
            - [dirigiblelabs/dirigible-all](https://hub.docker.com/r/dirigiblelabs/dirigible-all/tags?page=1&ordering=last_updated) - Basic docker image - recommended for local test & development.
          
          > _**Note:** All Docker images are availalbe [here](https://hub.docker.com/u/dirigiblelabs)_

          #### Available for download `*.war` packages:
            - _**[server-all](https://github.com/eclipse/dirigible/releases/download/v${{ github.event.inputs.releaseVersion }}/server-all.zip) - Basic package - recommended for local test & development.**_
            
          > _**Note:** Unzip the downloaded file to extract the `ROOT.war` binary._
          
          For more information go to [https://www.dirigible.io/help/setup/](https://www.dirigible.io/help/setup/).

    - name: Upload server-all
      id: upload-server-all 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./server-all.zip
        asset_name: server-all.zip
        asset_content_type: application/zip

#----------------Publish GitHub Release------------------#

    - name: "Git: Push Changes"
      run: |
        git push --set-upstream origin ${{ github.event.inputs.releaseVersion }}
        git push