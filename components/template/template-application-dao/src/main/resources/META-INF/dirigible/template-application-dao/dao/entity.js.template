#if($dataCount)
import { query } from "@dirigible/db";
#end
import { producer } from "@dirigible/messaging";
import { extensions } from "@dirigible/extensions";
import { dao as daoApi } from "@dirigible/db";
#set($isEntityUtilsEnabled = "false")
#foreach ($property in $properties)
#if($property.dataType == "DATE" || $property.dataType == "BOOLEAN")
#set($isEntityUtilsEnabled = "true")
#break
#end
#end
#if($isEntityUtilsEnabled == "true")
import * as EntityUtils from "../utils/EntityUtils";
#end
#if($roleRead && $roleRead != "" || $roleWrite && $roleWrite != "") 
#set($isEntitySecurityEnabled = "true")
#end
#foreach ($property in $properties)
#if($property.roleRead && $property.roleRead != ""|| $property.roleWrite && $property.roleWrite != "")
#set($isEntityPropertySecurityEnabled = "true")
#break
#end
#end
#if($isEntitySecurityEnabled || $isEntityPropertySecurityEnabled)
import { user } from "@dirigible/security";

function ForbiddenError(message) {
    this.name = "ForbiddenError";
    this.message = message;
    this.stack = (new Error()).stack;
}
#end

let dao = daoApi.create({
	table: "${tablePrefix}_${dataName}",
	properties: [
#foreach ($property in $properties)
#if($foreach.isFirst())
		{
#else
 {
#end
			name: "${property.name}",
			column: "${property.dataName}",
			type: "${property.dataType}",
#if($property.dataPrimaryKey)
			id: true,
#end
#if($property.dataPrimaryKey)
#if($property.dataAutoIncrement)
			autoIncrement: true,
#else
			autoIncrement: false,
#end
#end
#if($property.dataNotNull)
			required: true
#end
		}#if($foreach.hasNext),#end
#end
]
});

export const list = (settings) => {
#if($roleRead && $roleRead != "") 
	if (!user.isInRole("${roleRead}")) {
		throw new ForbiddenError("You do not have the required role to call this function");
	}
#end
#if($isEntityUtilsEnabled == "true")
	return dao.list(settings).map(function(e) {
#foreach ($property in $properties)
#if($property.roleRead)
		if (!user.isInRole("${property.roleRead}")) {
			delete e.$property.name;
		}
#end
#if($property.dataType == "DATE")
		EntityUtils.setDate(e, "${property.name}");
#end
#if($property.dataType == "BOOLEAN")
		EntityUtils.setBoolean(e, "${property.name}");
#end
#end
		return e;
	});
#elseif($isEntityPropertySecurityEnabled == "true")
	return dao.list(settings).map(function(e) {
#foreach ($property in $properties)
#if($property.roleRead && $property.roleRead != "")
		if (!user.isInRole("${property.roleRead}")) {
			delete e.$property.name;
		}
#end
#end
		return e;
	});
#else
	return dao.list(settings);
#end
}

export const get = (id) => {
#if($roleRead && $roleRead != "") 
	if (!user.isInRole("${roleRead}")) {
		throw new ForbiddenError("You do not have the required role to call this function");
	}
#end
#if($isEntityUtilsEnabled == "true")
	let entity = dao.find(id);
#foreach ($property in $properties)
#if($property.roleRead && $property.roleRead != "")
	if (!user.isInRole("${property.roleRead}")) {
		delete entity.$property.name;
	}
#end
#if($property.dataType == "DATE")
	EntityUtils.setDate(entity, "${property.name}");
#end
#if($property.dataType == "BOOLEAN")
	EntityUtils.setBoolean(entity, "${property.name}");
#end
#end
	return entity;
#elseif($isEntityPropertySecurityEnabled == "true")
	let entity = dao.find(id);
#foreach ($property in $properties)
#if($property.roleRead && $property.roleRead != "")
	if (!user.isInRole("${property.roleRead}")) {
		delete entity.$property.name;
	}
#end
#end
	return entity;
#else
	return dao.find(id);
#end
}

export const create = (entity) => {
#if($roleWrite && $roleWrite != "") 
	if (!user.isInRole("${roleWrite}")) {
		throw new ForbiddenError("You do not have the required role to call this function");
	}
#end
#if($isEntityUtilsEnabled == "true")
#foreach ($property in $properties)
#if($property.dataType == "DATE")
	EntityUtils.setLocalDate(entity, "${property.name}");
#end
#if($property.dataType == "BOOLEAN")
	EntityUtils.setBoolean(entity, "${property.name}");
#end
#end
#end
#foreach ($property in $properties)
#if($property.isCalculatedProperty)
	entity["${property.name}"] = ${property.calculatedPropertyExpression};
#end
#end
#if($isEntityPropertySecurityEnabled == "true")
#foreach ($property in $properties)
#if($property.roleWrite && $property.roleWrite != "")
	if (!user.isInRole("${property.roleWrite}")) {
		delete entity.$property.name;
	}
#end
#end
#end
#foreach ($property in $properties)
#if($property.dataDefaultValue)
	if (!entity.${property.name}) {
		entity.${property.name} = "${property.dataDefaultValue}";
	}
#end
#end
	let id = dao.insert(entity);
	triggerEvent({
		operation: "create",
		table: "${tablePrefix}_${dataName}",
		entity: entity,
		key: {
#foreach ($property in $properties)
#if($property.dataPrimaryKey)
			name: "${property.name}",
			column: "${property.dataName}",
			value: id
#end
#end
		}
	});
	return id;
}

export const update = (entity) => {
#if($roleWrite && $roleWrite != "") 
	if (!user.isInRole("${roleWrite}")) {
		throw new ForbiddenError("You do not have the required role to call this function");
	}
#end
#if($isEntityPropertySecurityEnabled == "true")
	let oldEntity = dao.find(entity.#foreach ($property in $properties)#if($property.dataPrimaryKey)${property.name}#end#end);
#foreach ($property in $properties)
#if($property.roleWrite && $property.roleWrite != "")
	if (!user.isInRole("${property.roleWrite}")) {
		delete entity.$property.name;
	}
#end
#end
	entity = Object.assign(oldEntity, entity);
#end
#if($isEntityUtilsEnabled == "true")
#foreach ($property in $properties)
#if($property.dataType == "DATE")
	// EntityUtils.setLocalDate(entity, "${property.name}");
#end
#if($property.dataType == "BOOLEAN")
	EntityUtils.setBoolean(entity, "${property.name}");
#end
#end
#end
#foreach ($property in $properties)
#if($property.isCalculatedProperty)
	entity["${property.name}"] = ${property.calculatedPropertyExpression};
#end
#end
	dao.update(entity);
	triggerEvent({
		operation: "update",
		table: "${tablePrefix}_${dataName}",
		entity: entity,
		key: {
#foreach ($property in $properties)
#if($property.dataPrimaryKey)
			name: "${property.name}",
			column: "${property.dataName}",
			value: entity.${property.name}
#end
#end
		}
	});
}

export const remove = (id) => {
	let entity = dao.find(id);
#if($roleWrite && $roleWrite != "") 
	if (!user.isInRole("${roleWrite}")) {
		throw new ForbiddenError("You do not have the required role to call this function");
	}
#end
	dao.remove(id);
	triggerEvent({
		operation: "delete",
		table: "${tablePrefix}_${dataName}",
		entity: entity,
		key: {
#foreach ($property in $properties)
#if($property.dataPrimaryKey)
			name: "${property.name}",
			column: "${property.dataName}",
			value: id
#end
#end
		}
	});
}

#if($layoutType == "MANAGE_DETAILS" || $layoutType == "LIST_DETAILS")
export const count = (#foreach ($property in $properties)#if($property.relationshipType == "COMPOSITION")${property.name}#end#end) => {
	let resultSet = query.execute('SELECT COUNT(*) AS COUNT FROM "${tablePrefix}_${dataName}" WHERE #foreach ($property in $properties)#if($property.relationshipType == "COMPOSITION")"${property.dataName}"#end#end = ?', [#foreach ($property in $properties)#if($property.relationshipType == "COMPOSITION")${property.name}#end#end]);
	if (resultSet !== null && resultSet[0] !== null) {
		if (resultSet[0].COUNT !== undefined && resultSet[0].COUNT !== null) {
			return resultSet[0].COUNT;
		} else if (resultSet[0].count !== undefined && resultSet[0].count !== null) {
			return resultSet[0].count;
		}
	}
	return 0;
}
#else
export const count = () => {
	return dao.count();
}
#end

export const customDataCount = () => {
#if($dataCount)
	let resultSet = query.execute('${dataCount}');
	if (resultSet !== null && resultSet[0] !== null) {
		if (resultSet[0].COUNT !== undefined && resultSet[0].COUNT !== null) {
			return resultSet[0].COUNT;
		} else if (resultSet[0].count !== undefined && resultSet[0].count !== null) {
			return resultSet[0].count;
		}
	}
	return 0;
#else
	return dao.count();
#end
}


const triggerEvent = async(data) => {
	const triggerExtensions = await extensions.loadExtensionModules("${projectName}/${perspectiveName}/${name}", ["trigger"]);
	triggerExtensions.forEach(triggerExtension => {
		try {
			triggerExtension.trigger(data);
		} catch (error) {
			console.error(error);
		}			
	});
	producer.queue("${projectName}/${perspectiveName}/${name}").send(JSON.stringify(data));
}
