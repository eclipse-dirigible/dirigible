import { Controller, Get } from "sdk/http"
import { ${name}Repository, ${name}Filter, ${name}PaginatedFilter } from "../../dao/${perspectiveName}/${name}Repository";

@Controller
class ${name}Service {

    private readonly repository = new ${name}Repository();

    @Get("/")
    public filter(_: any, ctx: any) {
        const filter: ${name}PaginatedFilter = {
#foreach ($property in $filter.properties)
#if(!$property.dataPrimaryKey)
#if($property.dataTypeTypescript == "string")
            ${property.name}: ctx.queryParameters.${property.name} ? ctx.queryParameters.${property.name} : undefined,
#elseif($property.dataTypeTypescript == "number")
            ${property.name}: ctx.queryParameters.${property.name} ? parseInt(ctx.queryParameters.${property.name}) : undefined,
#elseif($property.dataTypeTypescript == "Date")
            ${property.name}: ctx.queryParameters.${property.name} ? new Date(parseInt(ctx.queryParameters.${property.name})) : undefined,
#elseif($property.dataTypeTypescript == "boolean")
            ${property.name}: ctx.queryParameters.${property.name} !== undefined && ctx.queryParameters.${property.name} !== null ? ctx.queryParameters.${property.name} === "true" : undefined,
#else
            ${property.name}: ctx.queryParameters.${property.name} ? ctx.queryParameters.${property.name} as unknown: undefined,
#end
#end
#end
            "$limit": ctx.queryParameters["$limit"] ? parseInt(ctx.queryParameters["$limit"]) : undefined,
            "$offset": ctx.queryParameters["$offset"] ? parseInt(ctx.queryParameters["$offset"]) : undefined
        };

        return this.repository.findAll(filter);
    }

    @Get("/count")
    public count(_: any, ctx: any) {
        const filter: ${name}Filter = {
#foreach ($property in $filter.properties)
#if(!$property.dataPrimaryKey)
#if($property.dataTypeTypescript == "string")
            ${property.name}: ctx.queryParameters.${property.name} ? ctx.queryParameters.${property.name} : undefined,
#elseif($property.dataTypeTypescript == "number")
            ${property.name}: ctx.queryParameters.${property.name} ? parseInt(ctx.queryParameters.${property.name}) : undefined,
#elseif($property.dataTypeTypescript == "Date")
            ${property.name}: ctx.queryParameters.${property.name} ? new Date(parseInt(ctx.queryParameters.${property.name})) : undefined,
#elseif($property.dataTypeTypescript == "boolean")
            ${property.name}: ctx.queryParameters.${property.name} ? !!ctx.queryParameters.${property.name} : undefined,
#else
            ${property.name}: ctx.queryParameters.${property.name} ? ctx.queryParameters.${property.name} as unknown: undefined,
#end
#end
#end
        };

        const count = this.repository.count(filter);
        return JSON.stringify(count);
    }

}