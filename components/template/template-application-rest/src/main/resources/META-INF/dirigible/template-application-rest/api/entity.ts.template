#set($dollar = '$' )
#foreach ($property in $properties)
#if($property.widgetPattern && $property.widgetPattern != "")
#set($isEntityPropertyPropertyEnabled = "true")
#break
#end 
#end
import { Controller, Get, Post, Put, Delete, response } from "sdk/http"
import { Extensions } from "sdk/extensions"
import { ${name}Repository, ${name}EntityOptions } from "../../dao/${perspectiveName}/${name}Repository";
import { HttpUtils } from "../utils/HttpUtils";
#if($importsCode && $importsCode != "")
// custom imports
${importsCode}
#end

const validationModules = await Extensions.loadExtensionModules("${projectName}-${perspectiveName}-${name}", ["validate"]);

#if($isEntityPropertyPropertyEnabled)
class ValidationError extends Error {
    readonly name = "ValidationError";
    readonly stack = (new Error()).stack;

    constructor(message: string) {
        super(message);
    }
}

#end
@Controller
class ${name}Service {

    private readonly repository = new ${name}Repository();

    @Get("/")
    public getAll(_: any, ctx: any) {
        try {
#if($layoutType == "MANAGE_DETAILS" || $layoutType == "LIST_DETAILS")
            let ${masterEntityId} = parseInt(ctx.queryParameters.${masterEntityId});
            ${masterEntityId} = isNaN(${masterEntityId}) ? ctx.queryParameters.${masterEntityId} : ${masterEntityId};
#end
            const options: ${name}EntityOptions = {
#if($layoutType == "MANAGE_DETAILS" || $layoutType == "LIST_DETAILS")
                $filter: {
                    equals: {
                        ${masterEntityId}: ${masterEntityId}
                    }
                },
#end
                $limit: ctx.queryParameters["$limit"] ? parseInt(ctx.queryParameters["$limit"]) : undefined,
                $offset: ctx.queryParameters["$offset"] ? parseInt(ctx.queryParameters["$offset"]) : undefined
            };

            return this.repository.findAll(options);
        } catch (error: any) {
            this.handleError(error);
        }
    }

    @Post("/")
    public create(entity: any) {
        try {
            this.validateEntity(entity);
            entity.#foreach($property in $properties)#if($property.dataPrimaryKey)${property.name}#end#end = this.repository.create(entity);
            response.setHeader("Content-Location", "/services/ts/${projectName}/gen/api/${perspectiveName}/${name}Service.ts/" + entity.#foreach($property in $properties)#if($property.dataPrimaryKey)${property.name}#end#end);
            response.setStatus(response.CREATED);
            return entity;
        } catch (error: any) {
            this.handleError(error);
        }
    }

    @Get("/count")
    public count() {
        try {
            return this.repository.count();
        } catch (error: any) {
            this.handleError(error);
        }
    }

    @Post("/count")
    public countWithFilter(filter: any) {
        try {
            return this.repository.count(filter);
        } catch (error: any) {
            this.handleError(error);
        }
    }

    @Post("/search")
    public search(filter: any) {
        try {
            return this.repository.findAll(filter);
        } catch (error: any) {
            this.handleError(error);
        }
    }

    @Get("/:id")
    public getById(_: any, ctx: any) {
        try {
#foreach ($property in $properties)
#if($property.dataPrimaryKey)
#if($property.dataTypeTypescript == "number")
            const id = parseInt(ctx.pathParameters.id);
#elseif($property.dataTypeTypescript == "Date")
            const id = new Date(parseInt(ctx.pathParameters.id));
#elseif($property.dataTypeTypescript == "boolean")
            const id = ctx.pathParameters.id === "true";
#else
            const id = ctx.pathParameters.id;
#end
#end
#end
            const entity = this.repository.findById(id);
            if (entity) {
                return entity
            } else {
                HttpUtils.sendResponseNotFound("${name} not found");
            }
        } catch (error: any) {
            this.handleError(error);
        }
    }

    @Put("/:id")
    public update(entity: any, ctx: any) {
        try {
            entity.#foreach($property in $properties)#if($property.dataPrimaryKey)${property.name}#end#end = ctx.pathParameters.id;
            this.validateEntity(entity);
            this.repository.update(entity);
            return entity;
        } catch (error: any) {
            this.handleError(error);
        }
    }

    @Delete("/:id")
    public deleteById(_: any, ctx: any) {
        try {
            const id = ctx.pathParameters.id;
            const entity = this.repository.findById(id);
            if (entity) {
                this.repository.deleteById(id);
                HttpUtils.sendResponseNoContent();
            } else {
                HttpUtils.sendResponseNotFound("${name} not found");
            }
        } catch (error: any) {
            this.handleError(error);
        }
    }

    private handleError(error: any) {
        if (error.name === "ForbiddenError") {
            HttpUtils.sendForbiddenRequest(error.message);
        } else if (error.name === "ValidationError") {
            HttpUtils.sendResponseBadRequest(error.message);
        } else {
            HttpUtils.sendInternalServerError(error.message);
        }
    }

    private validateEntity(entity: any): void {
#foreach ($property in $properties)
#if($property.isRequiredProperty)
        if (entity.${property.name} === null || entity.${property.name} === undefined) {
            throw new ValidationError(`The '${property.name}' property is required, provide a valid value`);
        }
#end
#if($property.dataTypeTypescript == "string")
        if (entity.${property.name}.length > ${property.dataLength}) {
            throw new ValidationError(`The '${property.name}' exceeds the maximum length of [${property.dataLength}] characters`);
        }
#end
#if($property.widgetPattern && $property.widgetPattern != "")
        if (!RegExp(/${property.widgetPattern}/).test(entity.${property.name})) {
            throw new ValidationError(`The value provided for the '${property.name}' property ('[${dollar}{entity.${property.name}}]') doesn't match the required pattern '${property.widgetPattern}'`);
        }
#end
#end
        for (const next of validationModules) {
            next.validate(entity);
        }
    }
}
