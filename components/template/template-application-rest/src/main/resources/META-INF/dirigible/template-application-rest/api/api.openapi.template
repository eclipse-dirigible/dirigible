openapi: 3.0.3
info:
  title: $title - OpenAPI 3.0
  description: $description
  version: 1.0.0
externalDocs:
  description: Find out more about Eclipse Dirigible
  url: https://dirigible.io
servers:
  - url: /services/ts/$projectName/gen
tags:
#foreach($model in $models)
  - name: $model.name
#end
paths:
#foreach($model in $models)
  /api/$model.perspectiveName/${model.name}Service.ts:
    get:
      summary: List $model.name
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - $model.name
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/$model.name'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create $model.name
      tags:
        - $model.name
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/$model.name'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/$model.name'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/$model.perspectiveName/${model.name}Service.ts/{id}:
    get:
      summary: Get $model.name by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - $model.name
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/$model.name'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update $model.name by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - $model.name
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/$model.name'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/$model.name'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete $model.name by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - $model.name
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/$model.name'
        required: true
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/$model.perspectiveName/${model.name}Service.ts/count:
    get:
      summary: Count the number of $model.name
      tags:
        - $model.name
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of $model.name by ${model.name}FilterOptions
      tags:
        - $model.name
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/${model.name}FilterOptions'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/$model.perspectiveName/${model.name}Service.ts/search:
    post:
      summary: Search ${model.name} by ${model.name}FilterOptions
      tags:
        - $model.name
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/${model.name}FilterOptions'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/$model.name'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
#end
components:
  schemas:
#foreach($model in $models)
    $model.name:
      type: object
      properties:
    #foreach($property in $model.properties)
        $property.name:
          type: integer
          format: int64
    #end
    ${model.name}FilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
    #foreach($property in $model.properties)
                $property.name:
                  oneOf:
                    - type: integer
                    - type: array
                      items:
                        type: integer
    #end
            notEquals:
              type: object
              properties:
    #foreach($property in $model.properties)
                $property.name:
                  oneOf:
                    - type: integer
                    - type: array
                      items:
                        type: integer
    #end
            contains:
              type: object
              properties:
    #foreach($property in $model.properties)
                $property.name:
                  type: integer
    #end
            greaterThan:
              type: object
              properties:
    #foreach($property in $model.properties)
                $property.name:
                  type: integer
    #end
            greaterThanOrEqual:
              type: object
              properties:
    #foreach($property in $model.properties)
                $property.name:
                  type: integer
    #end
            lessThan:
              type: object
              properties:
    #foreach($property in $model.properties)
                $property.name:
                  type: integer
    #end
            lessThanOrEqual:
              type: object
              properties:
    #foreach($property in $model.properties)
                $property.name:
                  type: integer
    #end
        $select:
          type: array
          example: []
          items:
            type: string
        $sort:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
#end
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string