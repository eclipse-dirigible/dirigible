#foreach ($column in $columns)
#if($column.roleRead)
#set($isEntityPropertySecurityEnabled = "true")
#break
#end
#end
import { Controller, Get, Post } from "sdk/http"
import { ${name}Repository, ${name}Filter, ${name}PaginatedFilter } from "../../dao/${perspectiveName}/${name}Repository";
#if($perspectiveRole)
import { user } from "sdk/security"
import { ForbiddenError } from "../utils/ForbiddenError";
#end
import { HttpUtils } from "../utils/HttpUtils";

@Controller
class ${name}Service {

    private readonly repository = new ${name}Repository();

    @Get("/")
    public filter(_: any, ctx: any) {
        try {
#if($perspectiveRole)
            this.checkPermissions();
#end
            const filter: ${name}PaginatedFilter = {
#foreach ($column in $columns)
#if($column.typeTypescript == "string")
                ${column.alias}: ctx.queryParameters.${column.alias} ? ctx.queryParameters.${column.alias} : undefined,
#elseif($column.typeTypescript == "number")
                ${column.alias}: ctx.queryParameters.${column.alias} ? parseInt(ctx.queryParameters.${column.alias}) : undefined,
#elseif($column.typeTypescript == "Date")
                ${column.alias}: ctx.queryParameters.${column.alias} ? new Date(parseInt(ctx.queryParameters.${column.alias})) : undefined,
#elseif($column.typeTypescript == "boolean")
                ${column.alias}: ctx.queryParameters.${column.alias} !== undefined && ctx.queryParameters.${column.alias} !== null ? ctx.queryParameters.${column.alias} === "true" : undefined,
#else
                ${column.alias}: ctx.queryParameters.${column.alias} ? ctx.queryParameters.${column.alias} as unknown: undefined,
#end
#end
                "$limit": ctx.queryParameters["$limit"] ? parseInt(ctx.queryParameters["$limit"]) : undefined,
                "$offset": ctx.queryParameters["$offset"] ? parseInt(ctx.queryParameters["$offset"]) : undefined
            };

#if($isEntityPropertySecurityEnabled)
            return this.repository.findAll(filter).map(e => this.transformEntity("read", e));
#else
            return this.repository.findAll(filter);
#end
        } catch (error: any) {
            this.handleError(error);
        }
    }

    @Get("/count")
    public count(_: any, ctx: any) {
        try {
#if($perspectiveRole)
            this.checkPermissions();
#end
            const filter: ${name}Filter = {
#foreach ($column in $columns)
#if($column.typeTypescript == "string")
                ${column.alias}: ctx.queryParameters.${column.alias} ? ctx.queryParameters.${column.alias} : undefined,
#elseif($column.typeTypescript == "number")
                ${column.alias}: ctx.queryParameters.${column.alias} ? parseInt(ctx.queryParameters.${column.alias}) : undefined,
#elseif($column.typeTypescript == "Date")
                ${column.alias}: ctx.queryParameters.${column.alias} ? new Date(parseInt(ctx.queryParameters.${column.alias})) : undefined,
#elseif($column.typeTypescript == "boolean")
                ${column.alias}: ctx.queryParameters.${column.alias} !== undefined && ctx.queryParameters.${column.alias} !== null ? ctx.queryParameters.${column.alias} === "true" : undefined,
#else
                ${column.alias}: ctx.queryParameters.${column.alias} ? ctx.queryParameters.${column.alias} as unknown: undefined,
#end
#end
            };
            return this.repository.count(filter);
        } catch (error: any) {
            this.handleError(error);
        }
    }

    @Post("/count")
    public countWithFilter(filter: any) {
        try {
#if($perspectiveRole || $roleRead || $roleWrite)
            this.checkPermissions("read");
#end
            return this.repository.count(filter);
        } catch (error: any) {
            this.handleError(error);
        }
    }

    @Post("/search")
    public search(filter: any) {
        try {
#if($perspectiveRole || $roleRead || $roleWrite)
            this.checkPermissions("read");
#end
#if($isEntityPropertySecurityEnabled)
            return this.repository.findAll(filter).map(e => this.transformEntity("read", e));
#else
            return this.repository.findAll(filter);
#end
        } catch (error: any) {
            this.handleError(error);
        }
    }

    private handleError(error: any) {
        if (error.name === "ForbiddenError") {
            HttpUtils.sendForbiddenRequest(error.message);
        } else if (error.name === "ValidationError") {
            HttpUtils.sendResponseBadRequest(error.message);
        } else {
            HttpUtils.sendInternalServerError(error.message);
        }
    }

#if($perspectiveRole)
    private checkPermissions() {
        if (!user.isInRole("${perspectiveRole}")) {
            throw new ForbiddenError();
        }
    }

#end
#if($isEntityPropertySecurityEnabled)
    private transformEntity(operationType: string, originalEntity: any) {
        const entity = { ...originalEntity };
#foreach ($column in $columns)
#if($column.roleRead)
        if (operationType === "read" && !user.isInRole("${property.roleRead}")) {
            delete entity.${column.alias};
        }
#end
#end
        return entity;
    }

#end
}