/*
 * Generated by Eclipse Dirigible based on model and template.
 *
 * Do not modify the content as it may be re-generated again.
 */
const restTemplateManager = dirigibleRequire("template-application-rest/template/template");
const uiTemplate = dirigibleRequire("template-application-ui-angular/template/ui/template");
const generateUtils = dirigibleRequire("ide-generate-service/template/generateUtils");
const parameterUtils = dirigibleRequire("ide-generate-service/template/parameterUtils");

const extensions = dirigibleRequire("extensions/extensions");

exports.generate = function (model, parameters) {
    model = JSON.parse(model).model;

    exports.enhanceModel(model, parameters);

    let templateSources = exports.getTemplate(parameters).sources;
    parameterUtils.process(model, parameters)
    templateSources = [];
    return generateUtils.generateFiles(model, parameters, templateSources);
};

exports.enhanceModel = function (model, parameters) {
    try {
        const extensionPointName = `${parameters.projectName}-action`;
        const actions = []
        try {
            const actionExtensions = extensions.getExtensions(extensionPointName);
            for (let i = 0; i < actionExtensions.length; i++) {
                const actionExtension = require(actionExtensions[i]);
                actions.push(actionExtension.getAction());
            }
        } catch (e) {
            console.error(`Error occurred, while generating custom actions from extension point '${extensionPointName}': ${e}`);
        }

        for (let i = 0; i < actions.length; i++) {
            for (let j = 0; j < model.entities.length; j++) {
                if (actions[i].entity === model.entities[j].name) {
                    if (model.entities[j].actions === undefined) {
                        model.entities[j].actions = [];
                    }
                    model.entities[j].actions.push(actions[i]);
                }
            }
        }

    } catch (e) {
        console.error(`Error occurred, while enhancing model:\n\n'${JSON.stringify(model)}'\n\nParameters:\n\n${JSON.stringify(parameters)}\n\nError: ${e}`);
    }
}

exports.getTemplate = function (parameters) {
    let restTemplate = restTemplateManager.getTemplate(parameters);

    let templateSources = [];
    templateSources = templateSources.concat(restTemplate.sources);
    templateSources = templateSources.concat(uiTemplate.getSources(parameters));

    let templateParameters = getTemplateParameters();
    templateParameters = templateParameters.concat(restTemplate.parameters);

    return {
        name: "Application - UI (AngularJS)",
        description: "Application with UI, REST APIs and DAOs",
        extension: "model",
        sources: templateSources,
        parameters: templateParameters
    };
};

function getTemplateParameters() {
    return [
        {
            name: "brand",
            label: "Brand",
            placeholder: "Enter Brand"
        },
        {
            name: "brandUrl",
            label: "Brand URL",
            placeholder: "Enter Brand URL"
        },
        {
            name: "title",
            label: "Title",
            placeholder: "Enter Title"
        },
        {
            name: "description",
            label: "Description",
            placeholder: "Enter Description"
        }
    ];
}