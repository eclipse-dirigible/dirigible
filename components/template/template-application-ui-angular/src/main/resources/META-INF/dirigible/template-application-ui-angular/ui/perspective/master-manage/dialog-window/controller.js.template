#set($dollar = '$')
angular.module('page', ['blimpKit', 'platformView', 'EntityService'])
	.config(['EntityServiceProvider', (EntityServiceProvider) => {
		EntityServiceProvider.baseUrl = '/services/ts/${projectName}/gen/${genFolderName}/api/${perspectiveName}/${name}Service.ts';
	}])
	.controller('PageController', ($scope, ${dollar}http, ViewParameters, EntityService) => {
		const Dialogs = new DialogHub();
		const Notifications = new NotificationHub();
		$scope.entity = {};
		$scope.forms = {
			details: {},
		};
		$scope.formHeaders = {
			select: '${name} Details',
			create: 'Create ${name}',
			update: 'Update ${name}'
		};
		$scope.action = 'select';

		let params = ViewParameters.get();
		if (Object.keys(params).length) {
			$scope.action = params.action;
#foreach ($property in $properties)
#if($property.isDateType)
			if (params.entity.${property.name}) {
				params.entity.${property.name} = new Date(params.entity.${property.name});
			}
#end
#end
			$scope.entity = params.entity;
			$scope.selectedMainEntityKey = params.selectedMainEntityKey;
			$scope.selectedMainEntityId = params.selectedMainEntityId;
#foreach ($property in $properties)
#if($property.widgetType == "DROPDOWN")
			$scope.options${property.name} = params.options${property.name};
#if($property.widgetDropDownMultiSelect)
			if (${dollar}scope.entity.${property.name}) {
				${dollar}scope.entity.${property.name} = ${dollar}scope.entity.${property.name}.split(',').map(e => parseInt(e));
			}
#end
#end
#end
		}

		$scope.create = () => {
			let entity = $scope.entity;
			entity[$scope.selectedMainEntityKey] = $scope.selectedMainEntityId;
#foreach ($property in $properties)
#if($property.widgetType == "DROPDOWN" && $property.widgetDropDownMultiSelect)
			if (entity.${property.name}) {
				entity.${property.name} = entity.${property.name}.join();
			}
#end
#end
			EntityService.create(entity).then((response) => {
				Dialogs.postMessage({ topic: '${projectName}.${perspectiveName}.${name}.entityCreated', data: response.data });
				Notifications.show({
					title: '${name}',
					description: '${name} successfully created',
					type: 'positive'
				});
				$scope.cancel();
			}, (error) => {
				const message = error.data ? error.data.message : '';
				$scope.$evalAsync(() => {
					$scope.errorMessage = `Unable to create ${name}: '${message}'`;
				});
				console.error('EntityService:', error);
			});
		};

		$scope.update = () => {
			let id = ${dollar}scope.entity.${primaryKeysString};
			let entity = $scope.entity;
			entity[$scope.selectedMainEntityKey] = $scope.selectedMainEntityId;
#foreach ($property in $properties)
#if($property.widgetType == "DROPDOWN" && $property.widgetDropDownMultiSelect)
			if (entity.${property.name}) {
				entity.${property.name} = entity.${property.name}.join();
			}
#end
#end
			EntityService.update(id, entity).then((response) => {
				Dialogs.postMessage({ topic: '${projectName}.${perspectiveName}.${name}.entityUpdated', data: response.data });
				$scope.cancel();
				Notifications.show({
					title: '${name}',
					description: '${name} successfully updated',
					type: 'positive'
				});
			}, (error) => {
				const message = error.data ? error.data.message : '';
				$scope.$evalAsync(() => {
					$scope.errorMessage = `Unable to update ${name}: '${message}'`;
				});
				console.error('EntityService:', error);
			});
		};

#foreach ($property in $properties)
#if ($property.widgetType == "DROPDOWN")
		${dollar}scope.service${property.name} = '${property.widgetDropdownUrl}';
		
		$scope.options${property.name} = [];
		
		${dollar}http.get('${property.widgetDropdownUrl}').then((response) => {
			${dollar}scope.options${property.name} = response.data.map(e => ({
				value: e.${property.widgetDropDownKey},
				text: e.${property.widgetDropDownValue}
			}));
		}, (error) => {
			console.error(error);
			const message = error.data ? error.data.message : '';
			Dialogs.showAlert({
				title: '${property.name}',
				message: `Unable to load data: '${message}'`,
				type: AlertTypes.Error
			});
		});
#end
#end

#foreach ($property in $properties)
#if($property.widgetDependsOnProperty)
		${dollar}scope.${dollar}watch('entity.${property.widgetDependsOnProperty}', (newValue, oldValue) => {
			if (newValue !== undefined && newValue !== null) {
				${dollar}http.get(${dollar}scope.service${property.widgetDependsOnProperty} + '/' + newValue).then((response) => {
					let valueFrom = response.data.${property.widgetDependsOnValueFrom};
#if($property.widgetType != "DROPDOWN")
					$scope.entity.${property.name} = valueFrom;
#end
#if($property.widgetType == "DROPDOWN")
					${dollar}http.post('${property.widgetDropdownUrl}/search', {
						$filter: {
							equals: {
								${property.widgetDependsOnFilterBy}: valueFrom
							}
						}
					}).then((response) => {
						${dollar}scope.options${property.name} = response.data.map(e => ({
							value: e.${property.widgetDropDownKey},
							text: e.${property.widgetDropDownValue}
						}));
						if ($scope.action !== 'select' && newValue !== oldValue) {
							if (${dollar}scope.options${property.name}.length == 1) {
								$scope.entity.${property.name} = ${dollar}scope.options${property.name}[0].value;
							} else {
								$scope.entity.${property.name} = undefined;
							}
						}
					}, (error) => {
						console.error(error);
					});
#end
				}, (error) => {
					console.error(error);
				});
			}
		});

#end
#end
		$scope.alert = (message) => {
			if (message) Dialogs.showAlert({
				title: 'Description',
				message: message,
				type: AlertTypes.Information,
				preformatted: true,
			});
		};

		$scope.cancel = () => {
			$scope.entity = {};
			$scope.action = 'select';
			Dialogs.closeWindow({ id: '${name}-details' });
		};

		$scope.clearErrorMessage = () => {
			$scope.errorMessage = null;
		};
	});