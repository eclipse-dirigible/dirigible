#set($dollar = '$')
angular.module('page', ['blimpKit', 'platformView', 'entityApi'])
	.config(["entityApiProvider", function (entityApiProvider) {
		entityApiProvider.baseUrl = "/services/ts/${projectName}/gen/${genFolderName}/api/${perspectiveName}/${name}Service.ts";
	}])
	.controller('PageController', function ($scope, ViewParameters, entityApi) {
		const Dialogs = new DialogHub();
		$scope.entity = {};
		$scope.forms = {
			details: {},
		};
		$scope.formHeaders = {
			select: "${name} Details",
			create: "Create ${name}",
			update: "Update ${name}"
		};
		$scope.action = 'select';

		let params = ViewParameters.get();
		if (Object.keys(params).length) {
			$scope.action = params.action;
#if($hasDates)

#foreach ($property in $properties)
#if($property.isDateType)
			if (params.entity.${property.name}) {
				params.entity.${property.name} = new Date(params.entity.${property.name});
			}
#end
#end
#end
			$scope.entity = params.entity;
			$scope.selectedMainEntityKey = params.selectedMainEntityKey;
			$scope.selectedMainEntityId = params.selectedMainEntityId;
#if($hasDropdowns)
#foreach ($property in $properties)
#if($property.widgetType == "DROPDOWN")
			$scope.options${property.name} = params.options${property.name};
#end
#end
#end
		}

		$scope.create = () => {
			let entity = $scope.entity;
			entity[$scope.selectedMainEntityKey] = $scope.selectedMainEntityId;
			entityApi.create(entity).then(function (response) {
				if (response.status != 201) {
					Dialogs.showAlert({
						title: "${name}",
						message: `Unable to create ${name}: '${response.message}'`,
						type: AlertTypes.Error
					});
					return;
				}
				Dialogs.postMessage({ topic: '${projectName}.${perspectiveName}.${name}.entityCreated', data: response.data });
				$scope.cancel();
				Dialogs.showAlert({
					title: "${name}",
					message: '${name} successfully created',
					type: AlertTypes.Success
				});
			});
		};

		$scope.update = function () {
			let id = ${dollar}scope.entity.${primaryKeysString};
			let entity = $scope.entity;
			entity[$scope.selectedMainEntityKey] = $scope.selectedMainEntityId;
			entityApi.update(id, entity).then(function (response) {
				if (response.status != 200) {
					Dialogs.showAlert({
						title: "${name}",
						message: `Unable to update ${name}: '${response.message}'`,
						type: AlertTypes.Error
					});
					return;
				}
				Dialogs.postMessage({ topic: '${projectName}.${perspectiveName}.${name}.entityUpdated', data: response.data });
				$scope.cancel();
				Dialogs.showAlert({
					title: "${name}",
					message: '${name} successfully updated',
					type: AlertTypes.Success
				});
			});
		};

#foreach ($property in $properties)
#if ($property.widgetType == "DROPDOWN")
		${dollar}scope.service${property.name} = "${property.widgetDropdownUrl}";
#end
#end

#foreach ($property in $properties)
#if($property.widgetDependsOnProperty)
		${dollar}scope.${dollar}watch('entity.${property.widgetDependsOnProperty}', function (newValue, oldValue) {
			if (newValue !== undefined && newValue !== null) {
				entityApi.${dollar}http.get(${dollar}scope.service${property.widgetDependsOnProperty} + '/' + newValue).then(function (response) {
					let valueFrom = response.data.${property.widgetDependsOnValueFrom};
#if($property.widgetType != "DROPDOWN")
					$scope.entity.${property.name} = valueFrom;
#end
#if($property.widgetType == "DROPDOWN")
					entityApi.${dollar}http.post("${property.widgetDropdownUrl}/search", {
						$filter: {
							equals: {
								${property.widgetDependsOnFilterBy}: valueFrom
							}
						}
					}).then(function (response) {
						${dollar}scope.options${property.name} = response.data.map(e => {
							return {
								value: e.${property.widgetDropDownKey},
								text: e.${property.widgetDropDownValue}
							}
						});
						if ($scope.action !== 'select' && newValue !== oldValue) {
							if (${dollar}scope.options${property.name}.length == 1) {
								$scope.entity.${property.name} = ${dollar}scope.options${property.name}[0].value;
							} else {
								$scope.entity.${property.name} = undefined;
							}
						}
					});
#end
				});
			}
		});

#end
#end
		$scope.alert = (message) => {
			Dialogs.showAlert({
				title: 'Description',
				message: message,
				type: AlertTypes.Information,
				preformatted: true,
			});
		};

		$scope.cancel = () => {
			$scope.entity = {};
			$scope.action = 'select';
			Dialogs.closeWindow({ id: '${name}-details' });
		};

	});