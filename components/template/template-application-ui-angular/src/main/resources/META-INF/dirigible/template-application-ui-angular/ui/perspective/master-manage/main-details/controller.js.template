#set($dollar = '$')
angular.module('page', ["ideUI", "ideView", "entityApi"])
	.config(["messageHubProvider", function (messageHubProvider) {
		messageHubProvider.eventIdPrefix = '${projectName}.${perspectiveName}.${name}';
	}])
	.config(["entityApiProvider", function (entityApiProvider) {
		entityApiProvider.baseUrl = "/services/ts/${projectName}/gen/${genFolderName}/api/${perspectiveName}/${name}Service.ts";
	}])
	.controller('PageController', ['$scope', 'Extensions', 'messageHub', 'entityApi', function ($scope, Extensions, messageHub, entityApi) {

		$scope.entity = {};
		$scope.forms = {
			details: {},
		};
		$scope.formHeaders = {
			select: "${name} Details",
			create: "Create ${name}",
			update: "Update ${name}"
		};
		$scope.action = 'select';

		//-----------------Custom Actions-------------------//
		Extensions.get('dialogWindow', '${projectName}-custom-action').then(function (response) {
			$scope.entityActions = response.filter(e => e.perspective === "${perspectiveName}" && e.view === "${name}" && e.type === "entity");
		});

		$scope.triggerEntityAction = function (action) {
			messageHub.showDialogWindow(
				action.id,
				{
					id: $scope.entity.${primaryKeysString}
				},
				null,
				true,
				action
			);
		};
		//-----------------Custom Actions-------------------//

		//-----------------Events-------------------//
		messageHub.onDidReceiveMessage("clearDetails", function (msg) {
			$scope.$apply(function () {
				$scope.entity = {};
#foreach ($property in $properties)
#if($property.widgetType == "DROPDOWN")
				$scope.options${property.name} = [];
#end
#end
				$scope.action = 'select';
			});
		});

		messageHub.onDidReceiveMessage("entitySelected", function (msg) {
			$scope.$apply(function () {
#foreach ($property in $properties)
#if($property.isDateType)
				if (msg.data.entity.${property.name}) {
					msg.data.entity.${property.name} = new Date(msg.data.entity.${property.name});
				}
#end
#end
				$scope.entity = msg.data.entity;
#foreach ($property in $properties)
#if($property.widgetType == "DROPDOWN")
				$scope.options${property.name} = msg.data.options${property.name};
#end
#end
				$scope.action = 'select';
			});
		});

		messageHub.onDidReceiveMessage("createEntity", function (msg) {
			$scope.$apply(function () {
				$scope.entity = {};
#foreach ($property in $properties)
#if($property.widgetType == "DROPDOWN")
				$scope.options${property.name} = msg.data.options${property.name};
#end
#end
				$scope.action = 'create';
			});
		});

		messageHub.onDidReceiveMessage("updateEntity", function (msg) {
			$scope.$apply(function () {
#foreach ($property in $properties)
#if($property.isDateType)
				if (msg.data.entity.${property.name}) {
					msg.data.entity.${property.name} = new Date(msg.data.entity.${property.name});
				}
#end
#end
				$scope.entity = msg.data.entity;
#foreach ($property in $properties)
#if($property.widgetType == "DROPDOWN")
				$scope.options${property.name} = msg.data.options${property.name};
#end
#end
				$scope.action = 'update';
			});
		});

#foreach ($property in $properties)
#if ($property.widgetType == "DROPDOWN")
		${dollar}scope.service${property.name} = "${property.widgetDropdownUrl}";
#end
#end

#foreach ($property in $properties)
#if($property.widgetDependsOnProperty)

		${dollar}scope.${dollar}watch('entity.${property.widgetDependsOnProperty}', function (newValue, oldValue) {
			if (newValue !== undefined && newValue !== null) {
				entityApi.${dollar}http.get(${dollar}scope.service${property.widgetDependsOnProperty} + '/' + newValue).then(function (response) {
					let valueFrom = response.data.${property.widgetDependsOnValueFrom};
#if($property.widgetType != "DROPDOWN")
					$scope.entity.${property.name} = valueFrom;
#end
#if($property.widgetType == "DROPDOWN")
					entityApi.${dollar}http.post("${property.widgetDropdownUrl}/search", {
						$filter: {
							equals: {
								${property.widgetDependsOnFilterBy}: valueFrom
							}
						}
					}).then(function (response) {
						${dollar}scope.options${property.name} = response.data.map(e => {
							return {
								value: e.${property.widgetDropDownKey},
								text: e.${property.widgetDropDownValue}
							}
						});
						if ($scope.action !== 'select' && newValue !== oldValue) {
							if (${dollar}scope.options${property.name}.length == 1) {
								$scope.entity.${property.name} = ${dollar}scope.options${property.name}[0].value;
							} else {
								$scope.entity.${property.name} = undefined;
							}
						}
					});
#end
				});
		});
#end
#end
		//-----------------Events-------------------//

		$scope.create = function () {
			entityApi.create($scope.entity).then(function (response) {
				if (response.status != 201) {
					messageHub.showAlertError("${name}", `Unable to create ${name}: '${response.message}'`);
					return;
				}
				messageHub.postMessage("entityCreated", response.data);
				messageHub.postMessage("clearDetails", response.data);
				messageHub.showAlertSuccess("${name}", "${name} successfully created");
			});
		};

		$scope.update = function () {
			entityApi.update($scope.entity.${primaryKeysString}, $scope.entity).then(function (response) {
				if (response.status != 200) {
					messageHub.showAlertError("${name}", `Unable to update ${name}: '${response.message}'`);
					return;
				}
				messageHub.postMessage("entityUpdated", response.data);
				messageHub.postMessage("clearDetails", response.data);
				messageHub.showAlertSuccess("${name}", "${name} successfully updated");
			});
		};

		$scope.cancel = function () {
			messageHub.postMessage("clearDetails");
		};

	}]);