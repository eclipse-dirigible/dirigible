#set($dollar = '$')
angular.module('page', ["ideUI", "ideView", "entityApi"])
	.config(["messageHubProvider", function (messageHubProvider) {
		messageHubProvider.eventIdPrefix = '${projectName}.${perspectiveName}.${name}';
	}])
	.config(["entityApiProvider", function (entityApiProvider) {
		entityApiProvider.baseUrl = "/services/ts/${projectName}/gen/api/${perspectiveName}/${name}Service.ts";
	}])
	.controller('PageController', ['${dollar}scope', '${dollar}http', 'messageHub', 'entityApi', function (${dollar}scope, ${dollar}http, messageHub, entityApi) {

		//-----------------Custom Actions-------------------//
		${dollar}http.get("/services/js/resources-core/services/custom-actions.js?extensionPoint=${projectName}-custom-action").then(function (response) {
			$scope.pageActions = response.data.filter(e => e.perspective === "${perspectiveName}" && e.view === "${name}" && (e.type === "page" || e.type === undefined));
			$scope.entityActions = response.data.filter(e => e.perspective === "${perspectiveName}" && e.view === "${name}" && e.type === "entity");
		});

		$scope.triggerPageAction = function (actionId) {
			for (const next of $scope.pageActions) {
				if (next.id === actionId) {
					messageHub.showDialogWindow("${projectName}-custom-action", {
						src: next.link,
					});
					break;
				}
			}
		};

		$scope.triggerEntityAction = function (actionId, selectedEntity) {
			for (const next of $scope.entityActions) {
				if (next.id === actionId) {
					messageHub.showDialogWindow("${projectName}-custom-action", {
						src: `${dollar}{next.link}?id=${dollar}{selectedEntity.${primaryKeysString}}`,
					});
					break;
				}
			}
		};
		//-----------------Custom Actions-------------------//

		function resetPagination() {
			$scope.dataPage = 1;
			$scope.dataCount = 0;
			$scope.dataLimit = 20;
		}
		resetPagination();

		//-----------------Events-------------------//
		messageHub.onDidReceiveMessage("entityCreated", function (msg) {
			$scope.loadPage($scope.dataPage);
		});

		messageHub.onDidReceiveMessage("entityUpdated", function (msg) {
			$scope.loadPage($scope.dataPage);
		});
		//-----------------Events-------------------//

		$scope.loadPage = function (pageNumber) {
			$scope.dataPage = pageNumber;
			entityApi.count().then(function (response) {
				if (response.status != 200) {
					messageHub.showAlertError("${name}", `Unable to count ${name}: '${response.message}'`);
					return;
				}
				$scope.dataCount = response.data;
				let offset = (pageNumber - 1) * $scope.dataLimit;
				let limit = $scope.dataLimit;
				entityApi.list(offset, limit).then(function (response) {
					if (response.status != 200) {
						messageHub.showAlertError("${name}", `Unable to list ${name}: '${response.message}'`);
						return;
					}
#if($hasDates)

					response.data.forEach(e => {
#foreach ($property in $properties)
#if($property.isDateType)
						if (e.${property.name}) {
							e.${property.name} = new Date(e.${property.name});
						}
#end
#end
					});

#end
					$scope.data = response.data;
				});
			});
		};
		$scope.loadPage($scope.dataPage);

		$scope.selectEntity = function (entity) {
			$scope.selectedEntity = entity;
		};

		$scope.openDetails = function (entity) {
			$scope.selectedEntity = entity;
			messageHub.showDialogWindow("${name}-details", {
				action: "select",
				entity: entity,
#if($hasDropdowns)
#foreach ($property in $properties)
#if($property.widgetType == "DROPDOWN")
				options${property.name}: $scope.options${property.name},
#end
#end
#end
			});
		};

		$scope.createEntity = function () {
			$scope.selectedEntity = null;
			messageHub.showDialogWindow("${name}-details", {
				action: "create",
				entity: {},
#if($hasDropdowns)
#foreach ($property in $properties)
#if($property.widgetType == "DROPDOWN")
				options${property.name}: $scope.options${property.name},
#end
#end
#end
			}, null, false);
		};

		$scope.updateEntity = function (entity) {
			messageHub.showDialogWindow("${name}-details", {
				action: "update",
				entity: entity,
#if($hasDropdowns)
#foreach ($property in $properties)
#if($property.widgetType == "DROPDOWN")
				options${property.name}: $scope.options${property.name},
#end
#end
#end
			}, null, false);
		};

		$scope.deleteEntity = function (entity) {
			let id = entity.${primaryKeysString};
			messageHub.showDialogAsync(
				'Delete ${name}?',
				`Are you sure you want to delete ${name}? This action cannot be undone.`,
				[{
					id: "delete-btn-yes",
					type: "emphasized",
					label: "Yes",
				},
				{
					id: "delete-btn-no",
					type: "normal",
					label: "No",
				}],
			).then(function (msg) {
				if (msg.data === "delete-btn-yes") {
					entityApi.delete(id).then(function (response) {
						if (response.status != 204) {
							messageHub.showAlertError("${name}", `Unable to delete ${name}: '${response.message}'`);
							return;
						}
						$scope.loadPage($scope.dataPage);
						messageHub.postMessage("clearDetails");
					});
				}
			});
		};
#if($hasDropdowns)

		//----------------Dropdowns-----------------//
#foreach ($property in $properties)
#if($property.widgetType == "DROPDOWN")
		$scope.options${property.name} = [];
#end
#end

#foreach ($property in $properties)
#if ($property.widgetType == "DROPDOWN")

		${dollar}http.get(${property.widgetDropdownUrl}).then(function (response) {
			${dollar}scope.options${property.name} = response.data.map(e => {
				return {
					value: e.${property.widgetDropDownKey},
					text: e.${property.widgetDropDownValue}
				}
			});
		});
#end
#end

#foreach ($property in $properties)
#if($property.widgetType == "DROPDOWN")
		${dollar}scope.options${property.name}Value = function (optionKey) {
			for (let i = 0; i < ${dollar}scope.options${property.name}.length; i++) {
				if (${dollar}scope.options${property.name}[i].value === optionKey) {
					return ${dollar}scope.options${property.name}[i].text;
				}
			}
			return null;
		};
#end
#end
		//----------------Dropdowns-----------------//
#end

	}]);
