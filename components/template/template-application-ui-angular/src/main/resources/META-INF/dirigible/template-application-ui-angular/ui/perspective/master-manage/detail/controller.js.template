#set($dollar = '$')
angular.module('page', ['blimpKit', 'platformView', 'platformLocale', 'EntityService'])
	.config(['EntityServiceProvider', (EntityServiceProvider) => {
		EntityServiceProvider.baseUrl = '/services/ts/${projectName}/gen/${genFolderName}/api/${perspectiveName}/${name}Service.ts';
	}])
	.controller('PageController', ($scope,#if($hasDropdowns) ${dollar}http,#end EntityService, Extensions, LocaleService, ButtonStates) => {
		const Dialogs = new DialogHub();
		let translated = {
			yes: 'Yes',
			no: 'No',
			deleteConfirm: 'Are you sure you want to delete ${name}? This action cannot be undone.',
			deleteTitle: 'Delete ${name}?'
		};

		LocaleService.onInit(() => {
			translated.yes = LocaleService.t('$projectName:defaults.yes');
			translated.no = LocaleService.t('$projectName:defaults.no');
			translated.deleteTitle = LocaleService.t('$projectName:defaults.deleteTitle', { name: '$t($projectName:t.${dataName})' });
			translated.deleteConfirm = LocaleService.t('$projectName:messages.deleteConfirm', { name: '$t($projectName:t.${dataName})' });
		});
		//-----------------Custom Actions-------------------//
		Extensions.getWindows(['${projectName}-custom-action']).then((response) => {
			$scope.pageActions = response.data.filter(e => e.perspective === '${perspectiveName}' && e.view === '${name}' && (e.type === 'page' || e.type === undefined));
			$scope.entityActions = response.data.filter(e => e.perspective === '${perspectiveName}' && e.view === '${name}' && e.type === 'entity');
		});

		$scope.triggerPageAction = (action) => {
			Dialogs.showWindow({
				hasHeader: true,
        		title: LocaleService.t(action.translation.key, action.translation.options, action.label),
				path: action.path,
				params: {
					selectedMainEntityKey: '${masterEntityId}',
					selectedMainEntityId: $scope.selectedMainEntityId,
				},
				maxWidth: action.maxWidth,
				maxHeight: action.maxHeight,
				closeButton: true
			});
		};

		$scope.triggerEntityAction = (action) => {
			Dialogs.showWindow({
				hasHeader: true,
        		title: LocaleService.t(action.translation.key, action.translation.options, action.label),
				path: action.path,
				params: {
					id: $scope.entity.${primaryKeysString},
					selectedMainEntityKey: '${masterEntityId}',
					selectedMainEntityId: $scope.selectedMainEntityId,
				},
				closeButton: true
			});
		};
		//-----------------Custom Actions-------------------//

		function resetPagination() {
			$scope.dataPage = 1;
			$scope.dataCount = 0;
			$scope.dataLimit = 10;
		}
		resetPagination();

		//-----------------Events-------------------//
		Dialogs.addMessageListener({ topic: '#if($hasReferencedProjection)${referencedProjectionProjectName}.${referencedProjectionPerspectiveName}#else${projectName}.${perspectiveName}#end.${masterEntity}.entitySelected', handler: (data) => {
			resetPagination();
			$scope.selectedMainEntityId = data.selectedMainEntityId;
			$scope.loadPage($scope.dataPage);
		}});
		Dialogs.addMessageListener({ topic: '#if($hasReferencedProjection)${referencedProjectionProjectName}.${referencedProjectionPerspectiveName}#else${projectName}.${perspectiveName}#end.${masterEntity}.clearDetails', handler: () => {
			$scope.$evalAsync(() => {
				resetPagination();
				$scope.selectedMainEntityId = null;
				$scope.data = null;
			});
		}});
		Dialogs.addMessageListener({ topic: '${projectName}.${perspectiveName}.${name}.clearDetails', handler: () => {
			$scope.$evalAsync(() => {
				$scope.entity = {};
				$scope.action = 'select';
			});
		}});
		Dialogs.addMessageListener({ topic: '${projectName}.${perspectiveName}.${name}.entityCreated', handler: () => {
			$scope.loadPage($scope.dataPage, $scope.filter);
		}});
		Dialogs.addMessageListener({ topic: '${projectName}.${perspectiveName}.${name}.entityUpdated', handler: () => {
			$scope.loadPage($scope.dataPage, $scope.filter);
		}});
		Dialogs.addMessageListener({ topic: '${projectName}.${perspectiveName}.${name}.entitySearch', handler: (data) => {
			resetPagination();
			$scope.filter = data.filter;
			$scope.filterEntity = data.entity;
			$scope.loadPage($scope.dataPage, $scope.filter);
		}});
		//-----------------Events-------------------//

		$scope.loadPage = (pageNumber, filter) => {
			let ${masterEntityId} = ${dollar}scope.selectedMainEntityId;
			$scope.dataPage = pageNumber;
			if (!filter && $scope.filter) {
				filter = $scope.filter;
			}
			if (!filter) {
				filter = {};
			}
			if (!filter.$filter) {
				filter.$filter = {};
			}
			if (!filter.$filter.equals) {
				filter.$filter.equals = {};
			}
			filter.$filter.equals.${masterEntityId} = ${masterEntityId};
			EntityService.count(filter).then((resp) => {
				if (resp.data) {
					$scope.dataCount = resp.data.count;
				}
				filter.$offset = (pageNumber - 1) * $scope.dataLimit;
				filter.$limit = $scope.dataLimit;
				EntityService.search(filter).then((response) => {
#if($hasDates)
					response.data.forEach(e => {
#foreach ($property in $properties)
#if($property.isDateType)
						if (e.${property.name}) {
							e.${property.name} = new Date(e.${property.name});
						}
#end
#end
					});

#end
					$scope.data = response.data;
				}, (error) => {
					const message = error.data ? error.data.message : '';
					Dialogs.showAlert({
						title: LocaleService.t('$projectName:t.${dataName}'),
						message: LocaleService.t('$projectName:messages.error.unableToLF', { name: '$t($projectName:t.${dataName})', message: message }),
						type: AlertTypes.Error
					});
					console.error('EntityService:', error);
				});
			}, (error) => {
				const message = error.data ? error.data.message : '';
				Dialogs.showAlert({
					title: LocaleService.t('$projectName:t.${dataName}'),
					message: LocaleService.t('$projectName:messages.error.unableToCount', { name: '$t($projectName:t.${dataName})', message: message }),
					type: AlertTypes.Error
				});
				console.error('EntityService:', error);
			});
		};

		$scope.selectEntity = (entity) => {
			$scope.selectedEntity = entity;
		};

		$scope.openDetails = (entity) => {
			$scope.selectedEntity = entity;
			Dialogs.showWindow({
				id: '${name}-details',
				params: {
					action: 'select',
					entity: entity,
#if($hasDropdowns)
#foreach ($property in $properties)
#if($property.widgetType == "DROPDOWN")
					options${property.name}: $scope.options${property.name},
#end
#end
#end
				},
			});
		};

		$scope.openFilter = () => {
			Dialogs.showWindow({
				id: '${name}-filter',
				params: {
					entity: $scope.filterEntity,
#if($hasDropdowns)
#foreach ($property in $properties)
#if($property.widgetType == "DROPDOWN")
					options${property.name}: $scope.options${property.name},
#end
#end
#end
				},
			});
		};

		$scope.createEntity = () => {
			$scope.selectedEntity = null;
			Dialogs.showWindow({
				id: '${name}-details',
				params: {
					action: 'create',
					entity: {},
					selectedMainEntityKey: '${masterEntityId}',
					selectedMainEntityId: $scope.selectedMainEntityId,
#if($hasDropdowns)
#foreach ($property in $properties)
#if($property.widgetType == "DROPDOWN")
					options${property.name}: $scope.options${property.name},
#end
#end
#end
				},
				closeButton: false
			});
		};

		$scope.updateEntity = (entity) => {
			Dialogs.showWindow({
				id: '${name}-details',
				params: {
					action: 'update',
					entity: entity,
					selectedMainEntityKey: '${masterEntityId}',
					selectedMainEntityId: $scope.selectedMainEntityId,
#if($hasDropdowns)
#foreach ($property in $properties)
#if($property.widgetType == "DROPDOWN")
					options${property.name}: $scope.options${property.name},
#end
#end
#end			},
				closeButton: false
			});
		};

		$scope.deleteEntity = (entity) => {
			let id = entity.${primaryKeysString};
			Dialogs.showDialog({
				title: translated.deleteTitle,
				message: translated.deleteConfirm,
				buttons: [{
					id: 'delete-btn-yes',
					state: ButtonStates.Emphasized,
					label: translated.yes,
				}, {
					id: 'delete-btn-no',
					label: translated.no,
				}],
				closeButton: false
			}).then((buttonId) => {
				if (buttonId === 'delete-btn-yes') {
					EntityService.delete(id).then(() => {
						$scope.loadPage($scope.dataPage, $scope.filter);
						Dialogs.triggerEvent('${projectName}.${perspectiveName}.${name}.clearDetails');
					}, (error) => {
						const message = error.data ? error.data.message : '';
						Dialogs.showAlert({
							title: LocaleService.t('$projectName:t.${dataName}'),
							message: LocaleService.t('$projectName:messages.error.unableToDelete', { name: '$t($projectName:t.${dataName})', message: message }),
							type: AlertTypes.Error,
						});
						console.error('EntityService:', error);
					});
				}
			});
		};
#if($hasDropdowns)

		//----------------Dropdowns-----------------//
#foreach ($property in $properties)
#if($property.widgetType == "DROPDOWN")
		$scope.options${property.name} = [];
#end
#end

#foreach ($property in $properties)
#if ($property.widgetType == "DROPDOWN")

		${dollar}http.get('${property.widgetDropdownUrl}').then((response) => {
			${dollar}scope.options${property.name} = response.data.map(e => ({
				value: e.${property.widgetDropDownKey},
				text: e.${property.widgetDropDownValue}
			}));
		}, (error) => {
			console.error(error);
			const message = error.data ? error.data.message : '';
			Dialogs.showAlert({
				title: '${property.name}',
				message: LocaleService.t('$projectName:messages.error.unableToLoad', { message: message }),
				type: AlertTypes.Error
			});
		});
#end
#end

#foreach ($property in $properties)
#if($property.widgetType == "DROPDOWN")
		${dollar}scope.options${property.name}Value = function (optionKey) {
#if($property.widgetDropDownMultiSelect)
			const values = [];
			if (Array.isArray(optionKey)) {
				optionKey = optionKey.join();
			}
			optionKey.split(',').map(e => parseInt(e)).forEach(key => {
				const found = ${dollar}scope.options${property.name}.find(e => e.value === key);
				if (found) {
					values.push(found.text);
				}
			});
			return values.join(', ');
#else
			for (let i = 0; i < ${dollar}scope.options${property.name}.length; i++) {
				if (${dollar}scope.options${property.name}[i].value === optionKey) {
					return ${dollar}scope.options${property.name}[i].text;
				}
			}
			return null;
#end
		};
#end
#end
		//----------------Dropdowns-----------------//
#end
	});
