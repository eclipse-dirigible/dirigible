{{- if .Values.volume.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "dirigible.fullname" . }}-claim
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.volume.storage }}
{{- end }}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "dirigible.fullname" . }}
  labels:
    {{- include "dirigible.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "dirigible.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "dirigible.selectorLabels" . | nindent 8 }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "dirigible.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        {{- if .Values.database.enabled }}
        - name: wait-db-ready
          image: busybox:1.28
          command:
            - sh
            - -c
            - for i in {1..15}; do echo "Waiting for database creation ..."; sleep 2; done;
        # - name: check-db-ready
        #   image: postgres:9.6.5
        #   command:
        #     - sh
        #     - -c
        #     - until pg_isready -h {{ include "dirigible.fullname" . }}-database -p 5432; do echo waiting for database; sleep 2; done;
        {{- else if .Values.volume.enabled }}
        - name: wait-volume-ready
          image: busybox:1.28
          command:
            - sh
            - -c
            - for i in {1..15}; do echo "Waiting for volume creation ..."; sleep 2; done;
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- if .Values.volume.enabled }}
          volumeMounts:
          - name: {{ include "dirigible.fullname" . }}-volume
            mountPath: /usr/local/tomcat/target/dirigible
          {{- end }}
          env:
            {{- if .Values.kyma.enabled }}
            - name: DIRIGIBLE_HOST
              value: https://{{ .Release.Name }}.{{ .Values.kyma.apirule.host }}
            {{- end }}
            {{- if .Values.database.enabled }}
            - name: DIRIGIBLE_DATABASE_PROVIDER
              value: custom
            - name: DIRIGIBLE_DATABASE_CUSTOM_DATASOURCES
              value: POSTGRE
            - name: DIRIGIBLE_DATABASE_DATASOURCE_NAME_DEFAULT
              value: POSTGRE
            - name: POSTGRE_URL
              value: jdbc:postgresql://{{ include "dirigible.fullname" . }}-database:5432/{{ .Values.database.username }}
            - name: POSTGRE_DRIVER
              value: org.postgresql.Driver
            - name: POSTGRE_USERNAME
              value: {{ .Values.database.username }}
            - name: POSTGRE_PASSWORD
              value: {{ .Values.database.password }}
            - name: DIRIGIBLE_MESSAGING_USE_DEFAULT_DATABASE
              value: "false"
            - name: DIRIGIBLE_DATABASE_NAMES_CASE_SENSITIVE
              value: "true"
            - name: DIRIGIBLE_SCHEDULER_MEMORY_STORE
              value: "true"
            {{- end }}
            {{- if .Values.keycloak.enabled }}
            - name: KEYCLOAK_CONFIDENTIAL_PORT
              value: "443"
            - name: KEYCLOAK_SSL_REQUIRED
              value: "none"
            - name: KEYCLOAK_REALM
              value: {{ .Values.keycloak.realm }}
            - name: KEYCLOAK_CLIENT_ID
              value: {{ .Values.keycloak.clientId }}
            {{- if .Values.ingress.enabled }}
            - name: KEYCLOAK_AUTH_SERVER_URL
              value: http{{ if $.Values.ingress.tls }}s{{ end }}://{{ .Values.keycloak.name }}.{{ .Values.ingress.host }}/auth/
            {{- else if .Values.kyma.apirule.host }}
            - name: KEYCLOAK_AUTH_SERVER_URL
              value: https://{{ .Values.keycloak.name }}.{{ .Values.kyma.apirule.host }}/auth/
            {{- else }}
            - name: KEYCLOAK_AUTH_SERVER_URL
              value: https://{{ .Values.keycloak.name }}/auth/
            {{- end }}
            {{- end }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- if .Values.dirigible.image }}
          image: "{{ .Values.dirigible.image }}"
          {{- else if .Values.keycloak.enabled }}
          image: "{{ .Values.image.repositoryKeycloak }}:{{ .Chart.AppVersion }}"
          {{- else if .Values.kyma.enabled }}
          image: "{{ .Values.image.repositoryKyma }}:{{ .Chart.AppVersion }}"
          {{- else }}
          image: "{{ .Values.image.repository }}:{{ .Chart.AppVersion }}"
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            failureThreshold: 10
            periodSeconds: 10
            httpGet:
              path: /
              port: http
          readinessProbe:
            failureThreshold: 10
            periodSeconds: 10
            httpGet:
              path: /services/v4/healthcheck
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- if .Values.volume.enabled }}
      volumes:
        - name: {{ include "dirigible.fullname" . }}-volume
          persistentVolumeClaim:
            claimName: {{ include "dirigible.fullname" . }}-claim
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}

---

apiVersion: v1
kind: Service
metadata:
  name: {{ include "dirigible.fullname" . }}
  labels:
    {{- include "dirigible.labels" . | nindent 4 }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    {{- include "dirigible.selectorLabels" . | nindent 4 }}

---

{{- if and (eq .Values.kyma.enabled true) (eq .Values.kyma.apirule.enabled true) }}
apiVersion: gateway.kyma-project.io/v1alpha1
kind: APIRule
metadata:
  name: {{ include "dirigible.fullname" . }}
spec:
  gateway: kyma-gateway.kyma-system.svc.cluster.local
  rules:
  - accessStrategies:
    - config: {}
      handler: noop
    methods:
    - GET
    - POST
    - PUT
    - PATCH
    - DELETE
    - HEAD
    path: /.*
  service:
    host: {{ .Release.Name }}
    name: {{ include "dirigible.fullname" . }}
    port: {{ .Values.service.port }}
{{- end }}

---

{{- if .Values.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }}
  labels:
    {{- include "dirigible.labels" . | nindent 4 }}
  {{- with .Values.ingress.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
    - hosts:
      - {{ .Release.Name }}.{{ .Values.ingress.host }}
      secretName: {{ .Release.Name }}-tls
{{- end }}
  rules:
    - host: {{ .Release.Name }}.{{ .Values.ingress.host }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ include "dirigible.fullname" . }}
                port:
                  number: {{ .Values.service.port }}
{{- end }}

---

{{- if .Values.database.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "dirigible.fullname" . }}-database-claim
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.database.storage }}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "dirigible.fullname" . }}-database
  labels:
    app: {{ include "dirigible.fullname" . }}-database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ include "dirigible.fullname" . }}-database
  template:
    metadata:
      labels:
        app: {{ include "dirigible.fullname" . }}-database
    spec:
      containers:
        - name: {{ include "dirigible.fullname" . }}-database
          image: {{ .Values.database.image }}
          imagePullPolicy: Always
          volumeMounts:
          - name: {{ include "dirigible.fullname" . }}-database-volume
            mountPath: /var/lib/postgresql/data
          env:
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
            - name: POSTGRES_USER
              value: {{ .Values.database.username }}
            - name: POSTGRES_PASSWORD
              value: {{ .Values.database.password }}
          ports:
            - name: jdbc
              containerPort: 5432
              protocol: TCP
      volumes:
        - name: {{ include "dirigible.fullname" . }}-database-volume
          persistentVolumeClaim:
            claimName: {{ include "dirigible.fullname" . }}-database-claim

---

apiVersion: v1
kind: Service
metadata:
  name: {{ include "dirigible.fullname" . }}-database
  labels:
    app: {{ include "dirigible.fullname" . }}-database
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: jdbc
      protocol: TCP
      name: jdbc
  selector:
    app: {{ include "dirigible.fullname" . }}-database
{{- end }}
